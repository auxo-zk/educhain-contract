{
  "address": "0x7D4aeC270b701fCcB634Efab885d034936Dc3adB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governor_",
          "type": "address"
        }
      ],
      "name": "createRevenuePoolFactory",
      "outputs": [
        {
          "internalType": "contract RevenuePoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a0b2c31d38eb151fd3f1d0a7b441605ea2ccb71723011b2240758c155b57f40",
  "receipt": {
    "to": null,
    "from": "0xe3C66D29ed3260f2b9DAc9f7037Fc728DC793C70",
    "contractAddress": "0x7D4aeC270b701fCcB634Efab885d034936Dc3adB",
    "transactionIndex": 1,
    "gasUsed": "10617836",
    "logsBloom": "0x
    "blockHash": "0x467fbd6c20186159827f46033ef603f8fcc4f9f6416d43fcfebc87263c91498d",
    "transactionHash": "0x2a0b2c31d38eb151fd3f1d0a7b441605ea2ccb71723011b2240758c155b57f40",
    "logs": [],
    "blockNumber": 34907,
    "cumulativeGasUsed": "10617836",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73dffdb2ceecf593dc7eb047dd1d52e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"createRevenuePoolFactory\",\"outputs\":[{\"internalType\":\"contract RevenuePoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RevenuePoolFactoryCreator.sol\":\"RevenuePoolFactoryCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/RevenuePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IRevenuePool.sol\\\";\\nimport \\\"./interfaces/IGovernor.sol\\\";\\nimport \\\"./interfaces/IGovernorVotes.sol\\\";\\nimport \\\"./interfaces/IRevenuePool.sol\\\";\\n\\ncontract RevenuePool is Context, IRevenuePool {\\n    IGovernorVotes private immutable _governor;\\n    address private _token;\\n    uint256 private _revenue;\\n    uint256 private _totalFunded;\\n    uint256 private _nextTokenId;\\n    mapping(uint256 tokenId => bool) private _claimed;\\n    constructor(\\n        address governor_,\\n        address token_,\\n        uint256 totalFunded_,\\n        uint256 nextTokenId_,\\n        uint256 revenue_\\n    ) payable {\\n        _governor = IGovernorVotes(governor_);\\n        _revenue = revenue_;\\n        _token = token_;\\n        _totalFunded = totalFunded_;\\n        _nextTokenId = nextTokenId_;\\n    }\\n\\n    function claim(uint256 tokenId) external {\\n        require(!claimed(tokenId), \\\"Claimed!\\\");\\n        require(tokenId < _nextTokenId, \\\"Invalid tokenId\\\");\\n\\n        uint256 value = governor().token().getVotes(tokenId, _msgSender());\\n\\n        _claimed[tokenId] = true;\\n\\n        uint256 claimAmount = (_revenue * value) / _totalFunded;\\n\\n        ERC20(_token).transfer(_msgSender(), claimAmount);\\n\\n        emit RevenueClaimed(_msgSender(), tokenId);\\n    }\\n\\n    function claimable(uint256 tokenId) public view returns (uint256) {\\n        if (tokenId < _nextTokenId || !_claimed[tokenId]) {\\n            uint256 value = governor().token().getVotes(tokenId, _msgSender());\\n            return (_revenue * value) / _totalFunded;\\n        }\\n        return 0;\\n    }\\n\\n    function claimables(\\n        uint256[] calldata tokenIds\\n    ) external view returns (uint256[] memory) {\\n        uint256[] memory claimableAmounts = new uint256[](tokenIds.length);\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            claimableAmounts[i] = claimable(tokenIds[i]);\\n        }\\n    }\\n\\n    function token() public view returns (address) {\\n        return _token;\\n    }\\n\\n    function governor() public view returns (IGovernorVotes) {\\n        return _governor;\\n    }\\n    function revenue() public view returns (uint256) {\\n        return _revenue;\\n    }\\n    function totalFunded() public view returns (uint256) {\\n        return _totalFunded;\\n    }\\n\\n    function nextTokenId() public view returns (uint256) {\\n        return _nextTokenId;\\n    }\\n\\n    function claimed(uint256 tokenId) public view returns (bool) {\\n        return _claimed[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xabb6becb61ef03ece86433ee1fa29d8a4d4818d6ce0c763d82a780cd9ddd733c\",\"license\":\"MIT\"},\"contracts/RevenuePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IGovernor.sol\\\";\\nimport \\\"./interfaces/IRevenuePool.sol\\\";\\nimport \\\"./interfaces/IRevenuePoolFactory.sol\\\";\\nimport \\\"./RevenuePool.sol\\\";\\n\\ncontract RevenuePoolFactory is IRevenuePoolFactory {\\n    address private _owner;\\n    IGovernor private immutable _governor;\\n    IRevenuePool[] private _pools;\\n\\n    constructor(address owner_, address governor_) {\\n        _owner = owner_;\\n        _governor = IGovernor(governor_);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner);\\n        _;\\n    }\\n\\n    function createPool(address token, uint256 amount) external payable {\\n        RevenuePool revenuePool = new RevenuePool(\\n            address(_governor),\\n            token,\\n            _governor.totalFunded(),\\n            _governor.nextTokenId(),\\n            amount\\n        );\\n\\n        ERC20(token).transferFrom(msg.sender, address(revenuePool), amount);\\n\\n        _pools.push(IRevenuePool(address(revenuePool)));\\n\\n        emit PoolCreated(address(revenuePool));\\n    }\\n\\n    function pool(uint256 poolIndex) public view returns (IRevenuePool) {\\n        return _pools[poolIndex];\\n    }\\n\\n    function pools() public view returns (IRevenuePool[] memory) {\\n        return _pools;\\n    }\\n\\n    function poolCounter() external view returns (uint256) {\\n        return _pools.length;\\n    }\\n}\\n\",\"keccak256\":\"0x85291ac8567cc074642ec43220788259deb169c0e584071d0d25e44a02febe49\",\"license\":\"MIT\"},\"contracts/RevenuePoolFactoryCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./RevenuePoolFactory.sol\\\";\\n\\ncontract RevenuePoolFactoryCreator {\\n    constructor() {}\\n\\n    function createRevenuePoolFactory(\\n        address owner_,\\n        address governor_\\n    ) external returns (RevenuePoolFactory) {\\n        RevenuePoolFactory revenuePoolFactory = new RevenuePoolFactory(\\n            owner_,\\n            governor_\\n        );\\n\\n        return revenuePoolFactory;\\n    }\\n}\\n\",\"keccak256\":\"0x7ea785ead09d8d08c63a73df8d0f2a8cad68d7c04cbad5ac6220037d14380173\",\"license\":\"MIT\"},\"contracts/interfaces/ICampaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface ICampaign {\\n    enum CampaignState {\\n        Pending,\\n        Active,\\n        Succeeded,\\n        Allocated\\n    }\\n\\n    event CampaignLaunched(uint256 campaignId);\\n\\n    event GovernorJoined(uint256 campaignId, uint256 governorId);\\n\\n    event Fund(\\n        uint256 campaignId,\\n        uint256 governorId,\\n        uint256 amount,\\n        uint256 tokenId\\n    );\\n\\n    event FundAllocated(uint256 campaignId, uint256[] governorIds);\\n\\n    struct Course {\\n        address governor;\\n        uint256 fund;\\n        uint256 minted;\\n        bytes32 descriptionHash;\\n    }\\n\\n    struct CampaignCore {\\n        uint256 totalFunded;\\n        bytes32 descriptionHash;\\n        uint64 fundStart;\\n        uint64 fundDuration;\\n        bool allocated;\\n        address tokenRaising;\\n        uint256[] governorIds;\\n        mapping(uint256 governorId => Course) courses;\\n    }\\n\\n    function launchCampaign(\\n        uint64 startFunding,\\n        uint64 duration,\\n        address tokenRaising,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 campaignId);\\n\\n    function joinCampaign(\\n        uint256 governorId,\\n        address governor,\\n        bytes32 descriptionHash\\n    ) external returns (uint256);\\n\\n    function fund(\\n        uint256 campaignId,\\n        uint256 governorId,\\n        uint256 amount\\n    ) external payable returns (uint256 tokenId);\\n\\n    function allocateFunds(uint256 campaignId) external;\\n\\n    function campaignData(\\n        uint256 campaignId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalFunded,\\n            bytes32 descriptionHash,\\n            uint64 fundStart,\\n            uint64 fundDuration,\\n            bool allocated,\\n            address tokenRaising,\\n            uint256[] memory governorIds\\n        );\\n}\\n\",\"keccak256\":\"0xa7b66fb70e1d5096a84d8dac3bd24d5cbce5714d1680cb9f0e9f50a4b5b5fccc\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICampaign.sol\\\";\\nimport \\\"./IRevenuePoolFactory.sol\\\";\\ninterface IGovernor {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    error GovernorInvalidProposalLength(\\n        uint256 targets,\\n        uint256 calldatas,\\n        uint256 values\\n    );\\n\\n    error GovernorUnexpectedProposalState(\\n        uint256 proposalId,\\n        ProposalState current,\\n        bytes32 expectedStates\\n    );\\n\\n    error GovernorDisabledDeposit();\\n\\n    error GovernorOnlyProposer(address account);\\n\\n    error GovernorOnlyExecutor(address account);\\n\\n    error GovernorNonexistentProposal(uint256 proposalId);\\n\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        bytes32 descriptionHash\\n    );\\n\\n    event ProposalQueued(uint256 proposalId, uint256 etaBlocks);\\n\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    event VoteCast(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint256 tokenId,\\n        uint8 support,\\n        uint256 weight\\n    );\\n\\n    struct ProposalCore {\\n        address proposer;\\n        uint64 voteStart;\\n        uint64 voteDuration;\\n        bytes32 descriptionHash;\\n        bool executed;\\n        bool canceled;\\n        uint64 etaBlocks;\\n    }\\n\\n    struct Action {\\n        address[] targets;\\n        uint256[] values;\\n        string[] signatures;\\n        bytes[] calldatas;\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash,\\n        uint64 startTime,\\n        uint64 votingDuration\\n    ) external returns (uint256 proposalId);\\n\\n    function castVote(\\n        uint256 proposalId,\\n        uint256 tokenId,\\n        uint8 support\\n    ) external returns (uint256 weight);\\n\\n    function castVoteBatch(\\n        uint256 proposalId,\\n        uint256[] memory tokenIds,\\n        uint8 support\\n    ) external returns (uint256 totalWeight);\\n\\n    function queue(uint256 proposalId) external;\\n\\n    function execute(uint256 proposalId) external payable;\\n\\n    function cancel(uint256 proposalId) external;\\n\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external pure returns (uint256);\\n\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        bytes32 salt\\n    ) external pure returns (bytes32);\\n\\n    // ========= VIEW FUNCTIONS =========\\n\\n    function name() external view returns (string memory);\\n\\n    function governorId() external view returns (uint256);\\n\\n    function campaign() external view returns (ICampaign);\\n\\n    function revenuePoolFactory() external view returns (IRevenuePoolFactory);\\n\\n    function nextTokenId() external view returns (uint256);\\n\\n    function totalFunded() external view returns (uint256);\\n\\n    function proposalCounter() external view returns (uint256);\\n\\n    function proposalIds(uint256 proposalIndex) external view returns (uint256);\\n\\n    function descriptionHash() external view returns (bytes32);\\n\\n    function state(uint256 proposalId) external view returns (ProposalState);\\n\\n    function proposalCore(\\n        uint256 proposalId\\n    ) external view returns (ProposalCore memory);\\n\\n    function proposalDeadline(\\n        uint256 proposalId\\n    ) external view returns (uint256);\\n\\n    function proposalProposer(\\n        uint256 proposalId\\n    ) external view returns (address);\\n\\n    function proposalEta(uint256 proposalId) external view returns (uint256);\\n\\n    function proposalNeedsQueuing(\\n        uint256 proposalId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x621c71d83de6a30e8a933131a085acb6b58d865f678b35ac0de25abf55a7035b\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernorVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVotes.sol\\\";\\ninterface IGovernorVotes {\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    error GovernorAlreadyCastVote(uint256 tokenId);\\n\\n    error GovernorInvalidVoteType();\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(uint256 tokenId => bool) hasVoted;\\n    }\\n\\n    function hasVoted(\\n        uint256 proposalId,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function proposalVotes(\\n        uint256 proposalId\\n    )\\n        external\\n        view\\n        returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes);\\n\\n    function token() external view returns (IVotes);\\n}\\n\",\"keccak256\":\"0x0b4cfee7caac3c2060f0b14b530ca7b693d023b0f473453ecaf5a7e2dfb67835\",\"license\":\"MIT\"},\"contracts/interfaces/IRevenuePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorVotes.sol\\\";\\n\\ninterface IRevenuePool {\\n    event RevenueClaimed(address account, uint256 tokenId);\\n\\n    function governor() external view returns (IGovernorVotes);\\n\\n    function revenue() external view returns (uint256);\\n\\n    function totalFunded() external view returns (uint256);\\n\\n    function nextTokenId() external view returns (uint256);\\n\\n    function claimed(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa98f1d4532c4a9dabb1321446621d28e0948d329928db1899872ba0becc34f5f\",\"license\":\"MIT\"},\"contracts/interfaces/IRevenuePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRevenuePool.sol\\\";\\ninterface IRevenuePoolFactory {\\n    event PoolCreated(address pool);\\n\\n    function createPool(address token, uint256 amount) external payable;\\n\\n    function pool(uint256 poolIndex) external view returns (IRevenuePool);\\n\\n    function pools() external view returns (IRevenuePool[] memory);\\n\\n    function poolCounter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x805b4be15af427e6c4ad1f2521ae70a637001d512630814ec659306944d4797f\",\"license\":\"MIT\"},\"contracts/interfaces/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVotes {\\n    function getVotes(\\n        uint256 tokenId,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function mint(address to, uint256 value) external returns (uint256);\\n\\n    function getVotingPower(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd54727cc5df002218be70ef5b61ec6df6ad9f7cb38eea3bc0aaa7aac901ee411\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638092709a14610030575b600080fd5b61004361003e3660046100d5565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100ac565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156100a3573d6000803e3d6000fd5b50949350505050565b610f008061010983390190565b80356001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b9050925092905056fe60a060405234801561001057600080fd5b50604051610f00380380610f0083398101604081905261002f91610070565b600080546001600160a01b0319166001600160a01b03938416179055166080526100a3565b80516001600160a01b038116811461006b57600080fd5b919050565b6000806040838503121561008357600080fd5b61008c83610054565b915061009a60208401610054565b90509250929050565b608051610e366100ca6000396000818160da0152818160fc015261017e0152610e366000f3fe60806040526004361061003f5760003560e01c806312d36171146100445780639e3079cb14610059578063c5c51dca1461007c578063fe3131121461009e575b600080fd5b6100576100523660046103f5565b6100d6565b005b34801561006557600080fd5b506001546040519081526020015b60405180910390f35b34801561008857600080fd5b50610091610356565b604051610073919061042d565b3480156100aa57600080fd5b506100be6100b936600461047a565b6103b8565b6040516001600160a01b039091168152602001610073565b60007f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad044f496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017c9190610493565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610493565b8560405161020b906103e8565b6001600160a01b03958616815294909316602085015260408401919091526060830152608082015260a001604051809103906000f080158015610252573d6000803e3d6000fd5b506040516323b872dd60e01b81523360048201526001600160a01b03808316602483015260448201859052919250908416906323b872dd906064016020604051808303816000875af11580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d091906104ac565b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081527f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc9060200160405180910390a1505050565b606060018054806020026020016040519081016040528092919081815260200182805480156103ae57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610390575b5050505050905090565b6000600182815481106103cd576103cd6104d5565b6000918252602090912001546001600160a01b031692915050565b610915806104ec83390190565b6000806040838503121561040857600080fd5b82356001600160a01b038116811461041f57600080fd5b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561046e5783516001600160a01b031683529284019291840191600101610449565b50909695505050505050565b60006020828403121561048c57600080fd5b5035919050565b6000602082840312156104a557600080fd5b5051919050565b6000602082840312156104be57600080fd5b815180151581146104ce57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fdfe60a060405260405161091538038061091583398101604081905261002291610076565b6001600160a01b03948516608052600155600080546001600160a01b03191693909416929092179092556002919091556003556100c4565b80516001600160a01b038116811461007157600080fd5b919050565b600080600080600060a0868803121561008e57600080fd5b6100978661005a565b94506100a56020870161005a565b6040870151606088015160809098015196999198509695945092505050565b6080516108296100ec60003960008181609a0152818161021b01526104f901526108296000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ad044f4911610066578063ad044f4914610106578063c4763a3a1461010e578063d1d58b251461012e578063dbe7e3bd14610141578063fc0c546a1461017457600080fd5b80630c340a2414610098578063379607f5146100d75780633e9491a2146100ec57806375794a3c146100fe575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100ea6100e5366004610623565b610185565b005b6001545b6040519081526020016100ce565b6003546100f0565b6002546100f0565b61012161011c36600461063c565b610423565b6040516100ce91906106b1565b6100f061013c366004610623565b6104cf565b61016461014f366004610623565b60009081526004602052604090205460ff1690565b60405190151581526020016100ce565b6000546001600160a01b03166100ba565b60008181526004602052604090205460ff16156101d45760405162461bcd60e51b8152602060048201526008602482015267436c61696d65642160c01b60448201526064015b60405180910390fd5b60035481106102175760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016101cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b91906106f5565b6001600160a01b0316636819736083336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610319919061071e565b6000838152600460205260408120805460ff191660019081179091556002549054929350909161034a90849061074d565b610354919061076a565b6000549091506001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da919061078c565b507fc15f451120b13b6b40c6ad6203614ab3088308bef9150c0d6f46ea79bf46422433604080516001600160a01b039092168252602082018690520160405180910390a1505050565b606060008267ffffffffffffffff811115610440576104406107ae565b604051908082528060200260200182016040528015610469578160200160208202803683370190505b50905060005b838110156104c75761049885858381811061048c5761048c6107c4565b905060200201356104cf565b8282815181106104aa576104aa6107c4565b6020908102919091010152806104bf816107da565b91505061046f565b505092915050565b60006003548210806104f0575060008281526004602052604090205460ff16155b1561061b5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057991906106f5565b6001600160a01b0316636819736084336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f7919061071e565b90506002548160015461060a919061074d565b610614919061076a565b9392505050565b506000919050565b60006020828403121561063557600080fd5b5035919050565b6000806020838503121561064f57600080fd5b823567ffffffffffffffff8082111561066757600080fd5b818501915085601f83011261067b57600080fd5b81358181111561068a57600080fd5b8660208260051b850101111561069f57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156106e9578351835292840192918401916001016106cd565b50909695505050505050565b60006020828403121561070757600080fd5b81516001600160a01b038116811461061457600080fd5b60006020828403121561073057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761076457610764610737565b92915050565b60008261078757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561079e57600080fd5b8151801515811461061457600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016107ec576107ec610737565b506001019056fea26469706673582212205f4efe0034b9711c1f5b5195275a49bc554a0e471aa84943e8e21979e0ecb00c64736f6c63430008140033a2646970667358221220ded04209ecb00177cc9fd9b5cd2f9b32a7ee11bccc30038abf39975c1d71445a64736f6c63430008140033a264697066735822122056d9f11e5360b1196f8a60b19dccd9d920e557ad201365a50140a0f4e569392164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}