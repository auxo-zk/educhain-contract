{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/ICampaign.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\ninterface ICampaign {\n    enum CampaignState {\n        Pending,\n        Active,\n        Succeeded,\n        Allocated\n    }\n\n    event CampaignLaunched(uint256 campaignId);\n\n    event GovernorJoined(uint256 campaignId, uint256 governorId);\n\n    event Fund(\n        uint256 campaignId,\n        uint256 governorId,\n        uint256 amount,\n        uint256 tokenId\n    );\n\n    event FundAllocated(uint256 campaignId, uint256[] governorIds);\n\n    struct Course {\n        address governor;\n        uint256 fund;\n        uint256 minted;\n        bytes32 descriptionHash;\n    }\n\n    struct CampaignCore {\n        uint256 totalFunded;\n        bytes32 descriptionHash;\n        uint64 fundStart;\n        uint64 fundDuration;\n        bool allocated;\n        address tokenRaising;\n        uint256[] governorIds;\n        mapping(uint256 governorId => Course) courses;\n    }\n\n    function launchCampaign(\n        uint64 startFunding,\n        uint64 duration,\n        address tokenRaising,\n        bytes32 descriptionHash\n    ) external returns (uint256 campaignId);\n\n    function joinCampaign(\n        uint256 governorId,\n        address governor,\n        bytes32 descriptionHash\n    ) external returns (uint256);\n\n    function fund(\n        uint256 campaignId,\n        uint256 governorId,\n        uint256 amount\n    ) external payable returns (uint256 tokenId);\n\n    function allocateFunds(uint256 campaignId) external;\n\n    function campaignData(\n        uint256 campaignId\n    )\n        external\n        view\n        returns (\n            uint256 totalFunded,\n            bytes32 descriptionHash,\n            uint64 fundStart,\n            uint64 fundDuration,\n            bool allocated,\n            address tokenRaising,\n            uint256[] memory governorIds\n        );\n}\n"
    },
    "contracts/interfaces/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ICampaign.sol\";\nimport \"./IRevenuePoolFactory.sol\";\ninterface IGovernor {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    error GovernorInvalidProposalLength(\n        uint256 targets,\n        uint256 calldatas,\n        uint256 values\n    );\n\n    error GovernorUnexpectedProposalState(\n        uint256 proposalId,\n        ProposalState current,\n        bytes32 expectedStates\n    );\n\n    error GovernorDisabledDeposit();\n\n    error GovernorOnlyProposer(address account);\n\n    error GovernorOnlyExecutor(address account);\n\n    error GovernorNonexistentProposal(uint256 proposalId);\n\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 voteStart,\n        uint256 voteEnd,\n        bytes32 descriptionHash\n    );\n\n    event ProposalQueued(uint256 proposalId, uint256 etaBlocks);\n\n    event ProposalExecuted(uint256 proposalId);\n\n    event ProposalCanceled(uint256 proposalId);\n\n    event VoteCast(\n        address indexed voter,\n        uint256 proposalId,\n        uint256 tokenId,\n        uint8 support,\n        uint256 weight\n    );\n\n    struct ProposalCore {\n        address proposer;\n        uint64 voteStart;\n        uint64 voteDuration;\n        bytes32 descriptionHash;\n        bool executed;\n        bool canceled;\n        uint64 etaBlocks;\n    }\n\n    struct Action {\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash,\n        uint64 startTime,\n        uint64 votingDuration\n    ) external returns (uint256 proposalId);\n\n    function castVote(\n        uint256 proposalId,\n        uint256 tokenId,\n        uint8 support\n    ) external returns (uint256 weight);\n\n    function castVoteBatch(\n        uint256 proposalId,\n        uint256[] memory tokenIds,\n        uint8 support\n    ) external returns (uint256 totalWeight);\n\n    function queue(uint256 proposalId) external;\n\n    function execute(uint256 proposalId) external payable;\n\n    function cancel(uint256 proposalId) external;\n\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) external pure returns (uint256);\n\n    function hashOperation(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        bytes32 salt\n    ) external pure returns (bytes32);\n\n    // ========= VIEW FUNCTIONS =========\n\n    function name() external view returns (string memory);\n\n    function governorId() external view returns (uint256);\n\n    function campaign() external view returns (ICampaign);\n\n    function revenuePoolFactory() external view returns (IRevenuePoolFactory);\n\n    function nextTokenId() external view returns (uint256);\n\n    function totalFunded() external view returns (uint256);\n\n    function proposalCounter() external view returns (uint256);\n\n    function proposalIds(uint256 proposalIndex) external view returns (uint256);\n\n    function descriptionHash() external view returns (bytes32);\n\n    function state(uint256 proposalId) external view returns (ProposalState);\n\n    function proposalCore(\n        uint256 proposalId\n    ) external view returns (ProposalCore memory);\n\n    function proposalDeadline(\n        uint256 proposalId\n    ) external view returns (uint256);\n\n    function proposalProposer(\n        uint256 proposalId\n    ) external view returns (address);\n\n    function proposalEta(uint256 proposalId) external view returns (uint256);\n\n    function proposalNeedsQueuing(\n        uint256 proposalId\n    ) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IGovernorVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IVotes.sol\";\ninterface IGovernorVotes {\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    error GovernorAlreadyCastVote(uint256 tokenId);\n\n    error GovernorInvalidVoteType();\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(uint256 tokenId => bool) hasVoted;\n    }\n\n    function hasVoted(\n        uint256 proposalId,\n        uint256 tokenId\n    ) external view returns (bool);\n\n    function proposalVotes(\n        uint256 proposalId\n    )\n        external\n        view\n        returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes);\n\n    function token() external view returns (IVotes);\n}\n"
    },
    "contracts/interfaces/IRevenuePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IGovernorVotes.sol\";\n\ninterface IRevenuePool {\n    event RevenueClaimed(address account, uint256 tokenId);\n\n    function governor() external view returns (IGovernorVotes);\n\n    function revenue() external view returns (uint256);\n\n    function totalFunded() external view returns (uint256);\n\n    function nextTokenId() external view returns (uint256);\n\n    function claimed(uint256 tokenId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IRevenuePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IRevenuePool.sol\";\ninterface IRevenuePoolFactory {\n    event PoolCreated(address pool);\n\n    function createPool(address token, uint256 amount) external payable;\n\n    function pool(uint256 poolIndex) external view returns (IRevenuePool);\n\n    function pools() external view returns (IRevenuePool[] memory);\n\n    function poolCounter() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVotes {\n    function getVotes(\n        uint256 tokenId,\n        address account\n    ) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (uint256);\n\n    function getVotingPower(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/RevenuePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IRevenuePool.sol\";\nimport \"./interfaces/IGovernor.sol\";\nimport \"./interfaces/IGovernorVotes.sol\";\nimport \"./interfaces/IRevenuePool.sol\";\n\ncontract RevenuePool is Context, IRevenuePool {\n    IGovernorVotes private immutable _governor;\n    address private _token;\n    uint256 private _revenue;\n    uint256 private _totalFunded;\n    uint256 private _nextTokenId;\n    mapping(uint256 tokenId => bool) private _claimed;\n    constructor(\n        address governor_,\n        address token_,\n        uint256 totalFunded_,\n        uint256 nextTokenId_,\n        uint256 revenue_\n    ) payable {\n        _governor = IGovernorVotes(governor_);\n        _revenue = revenue_;\n        _token = token_;\n        _totalFunded = totalFunded_;\n        _nextTokenId = nextTokenId_;\n    }\n\n    function claim(uint256 tokenId) external {\n        require(!claimed(tokenId), \"Claimed!\");\n        require(tokenId < _nextTokenId, \"Invalid tokenId\");\n\n        uint256 value = governor().token().getVotes(tokenId, _msgSender());\n\n        _claimed[tokenId] = true;\n\n        uint256 claimAmount = (_revenue * value) / _totalFunded;\n\n        ERC20(_token).transfer(_msgSender(), claimAmount);\n\n        emit RevenueClaimed(_msgSender(), tokenId);\n    }\n\n    function claimable(uint256 tokenId) public view returns (uint256) {\n        if (tokenId < _nextTokenId || !_claimed[tokenId]) {\n            uint256 value = governor().token().getVotes(tokenId, _msgSender());\n            return (_revenue * value) / _totalFunded;\n        }\n        return 0;\n    }\n\n    function claimables(\n        uint256[] calldata tokenIds\n    ) external view returns (uint256[] memory) {\n        uint256[] memory claimableAmounts = new uint256[](tokenIds.length);\n        for (uint256 i; i < tokenIds.length; i++) {\n            claimableAmounts[i] = claimable(tokenIds[i]);\n        }\n    }\n\n    function token() public view returns (address) {\n        return _token;\n    }\n\n    function governor() public view returns (IGovernorVotes) {\n        return _governor;\n    }\n    function revenue() public view returns (uint256) {\n        return _revenue;\n    }\n    function totalFunded() public view returns (uint256) {\n        return _totalFunded;\n    }\n\n    function nextTokenId() public view returns (uint256) {\n        return _nextTokenId;\n    }\n\n    function claimed(uint256 tokenId) public view returns (bool) {\n        return _claimed[tokenId];\n    }\n}\n"
    },
    "contracts/RevenuePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IGovernor.sol\";\nimport \"./interfaces/IRevenuePool.sol\";\nimport \"./interfaces/IRevenuePoolFactory.sol\";\nimport \"./RevenuePool.sol\";\n\ncontract RevenuePoolFactory is IRevenuePoolFactory {\n    address private _owner;\n    IGovernor private immutable _governor;\n    IRevenuePool[] private _pools;\n\n    constructor(address owner_, address governor_) {\n        _owner = owner_;\n        _governor = IGovernor(governor_);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    function createPool(address token, uint256 amount) external payable {\n        RevenuePool revenuePool = new RevenuePool(\n            address(_governor),\n            token,\n            _governor.totalFunded(),\n            _governor.nextTokenId(),\n            amount\n        );\n\n        ERC20(token).transferFrom(msg.sender, address(revenuePool), amount);\n\n        _pools.push(IRevenuePool(address(revenuePool)));\n\n        emit PoolCreated(address(revenuePool));\n    }\n\n    function pool(uint256 poolIndex) public view returns (IRevenuePool) {\n        return _pools[poolIndex];\n    }\n\n    function pools() public view returns (IRevenuePool[] memory) {\n        return _pools;\n    }\n\n    function poolCounter() external view returns (uint256) {\n        return _pools.length;\n    }\n}\n"
    },
    "contracts/RevenuePoolFactoryCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./RevenuePoolFactory.sol\";\n\ncontract RevenuePoolFactoryCreator {\n    constructor() {}\n\n    function createRevenuePoolFactory(\n        address owner_,\n        address governor_\n    ) external returns (RevenuePoolFactory) {\n        RevenuePoolFactory revenuePoolFactory = new RevenuePoolFactory(\n            owner_,\n            governor_\n        );\n\n        return revenuePoolFactory;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}